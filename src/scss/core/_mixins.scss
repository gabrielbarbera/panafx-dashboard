// Media queries
@mixin media-breakpoint-up($breakpoint) {
  @if $breakpoint == xs {
    @content;
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }
}

@mixin media-breakpoint-down($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: ($breakpoint-sm - 1)) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (max-width: ($breakpoint-md - 1)) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: ($breakpoint-lg - 1)) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: ($breakpoint-xl - 1)) {
      @content;
    }
  } @else if $breakpoint == xl {
    @content;
  }
}

// Flexbox
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Grid
@mixin make-container {
  width: 100%;
  padding-right: $grid-gutter-width / 2;
  padding-left: $grid-gutter-width / 2;
  margin-right: auto;
  margin-left: auto;
}

@mixin make-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$grid-gutter-width / 2;
  margin-left: -$grid-gutter-width / 2;
}

@mixin make-col-ready {
  position: relative;
  width: 100%;
  padding-right: $grid-gutter-width / 2;
  padding-left: $grid-gutter-width / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

// Typography
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Buttons
@mixin button-variant($background, $border, $color) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover {
    color: $color;
    background-color: darken($background, 10%);
    border-color: darken($border, 12%);
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 0.2rem rgba($background, 0.5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: $background;
    border-color: $border;
  }
}

// Forms
@mixin form-control-focus() {
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }
}

// Transitions
@mixin transition($transition...) {
  @if length($transition) == 0 {
    $transition: $transition-base;
  }

  @if length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  transition: $transition;
}

// Animations
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
} 